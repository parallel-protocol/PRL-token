{
  "address": "0x046f7342e221FA028f367Bbff63e414F4DC36Cad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mimo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_mainEid",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "EmergencyRescued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSent",
          "type": "uint256"
        }
      ],
      "name": "MigrationMessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIMO",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_AND_MIGRATE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyRescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainEid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_extraSendOptions",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_extraReturnOptions",
          "type": "bytes"
        }
      ],
      "name": "migrateToPRL",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "msgReceipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraSendOptions",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_extraReturnOptions",
          "type": "bytes"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x408f779c6ab6ab478722439c78437f2053c1ed776b4069828da5c204de4330c2",
  "receipt": {
    "to": null,
    "from": "0x3676b6ed4ae0c9ce3E0034510719fdF5fd585d55",
    "contractAddress": "0x046f7342e221FA028f367Bbff63e414F4DC36Cad",
    "transactionIndex": 2,
    "gasUsed": "1752262",
    "logsBloom": "0x
    "blockHash": "0xd7fe34b1d76084f1398898872ffc65b2bc0e1080375f0bc7fd028b356eb8bee7",
    "transactionHash": "0x408f779c6ab6ab478722439c78437f2053c1ed776b4069828da5c204de4330c2",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 95856930,
        "transactionHash": "0x408f779c6ab6ab478722439c78437f2053c1ed776b4069828da5c204de4330c2",
        "address": "0x046f7342e221FA028f367Bbff63e414F4DC36Cad",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003676b6ed4ae0c9ce3e0034510719fdf5fd585d55"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xd7fe34b1d76084f1398898872ffc65b2bc0e1080375f0bc7fd028b356eb8bee7"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 95856930,
        "transactionHash": "0x408f779c6ab6ab478722439c78437f2053c1ed776b4069828da5c204de4330c2",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x000000000000000000000000046f7342e221fa028f367bbff63e414f4dc36cad0000000000000000000000003676b6ed4ae0c9ce3e0034510719fdf5fd585d55",
        "logIndex": 13,
        "blockHash": "0xd7fe34b1d76084f1398898872ffc65b2bc0e1080375f0bc7fd028b356eb8bee7"
      }
    ],
    "blockNumber": 95856930,
    "cumulativeGasUsed": "2237484",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x22982F2d3696928E8c275b85864b1E5F35D91a4e",
    "0x6EDCE65403992e310A62460808c4b910D972f10f",
    "0x3676b6ed4ae0c9ce3E0034510719fdF5fd585d55",
    40161
  ],
  "numDeployments": 1,
  "solcInputHash": "0363bbdff5d3b308a816cf9c1ec0a1f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mimo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_mainEid\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"EmergencyRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"}],\"name\":\"MigrationMessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIMO\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_AND_MIGRATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraSendOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraReturnOptions\",\"type\":\"bytes\"}],\"name\":\"migrateToPRL\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"msgReceipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraSendOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_extraReturnOptions\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Cooper Labs\",\"custom:contact\":\"security@cooperlabs.xyz\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"EmergencyRescued(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of tokens rescued\",\"recipient\":\"The address that received the rescued tokens\",\"token\":\"The address of the rescued token\"}},\"MigrationMessageSent(bytes32,uint32,address,address,uint256,uint256)\":{\"params\":{\"amountSent\":\"The amount of tokens being migrated\",\"dstEid\":\"The destination endpoint ID\",\"from\":\"The address sending the migration\",\"guid\":\"The unique identifier of the sent message\",\"nativeFeeAmount\":\"The amount of native fee paid for the message\",\"to\":\"The address receiving the migrated tokens\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"constructor\":{\"params\":{\"_endpoint\":\"Address of the LayerZero endpoint\",\"_mainEid\":\"Endpoint ID of the main chain where the PrincipalMigrationContract is deployed\",\"_mimo\":\"Address of the MIMO token contract\",\"_owner\":\"Address of the contract owner\"}},\"emergencyRescue(address,uint256)\":{\"details\":\"This function can only be called by the owner and only when the contract is paused\",\"params\":{\"_amount\":\"The amount of tokens to rescue\",\"_token\":\"The address of the ERC20 token to rescue\"}},\"migrateToPRL(address,uint256,uint32,bytes,bytes)\":{\"params\":{\"_amount\":\"The amount of MIMO tokens to migrate\",\"_dstEid\":\"The destination endpoint ID\",\"_extraReturnOptions\":\"Gas settings for Main Chain -> Final chain\",\"_extraSendOptions\":\"Gas settings for A -> Main Chain\",\"_receiver\":\"The address that will receive the PRL tokens\"},\"returns\":{\"msgReceipt\":\"The receipt of the LayerZero message\"}},\"oAppVersion()\":{\"details\":\"Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented. ie. this is a SEND only OApp.If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\",\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol contract.\",\"senderVersion\":\"The version of the OAppSender.sol contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"This function can only be called by the owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quote(uint32,address,uint256,bytes,bytes)\":{\"params\":{\"_amount\":\"The amount of Mimo token to migrate.\",\"_dstEid\":\"Destination endpoint ID where the message will be sent.\",\"_extraReturnOptions\":\"Additional gas options for the return call (B -> A).\",\"_extraSendOptions\":\"Gas options for receiving the send call (A -> B).\",\"_receiver\":\"Address that will receive the PRL token.abi\"},\"returns\":{\"fee\":\"The estimated messaging fee.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"This function can only be called by the owner\"}},\"title\":\"PeripheralMigrationContract\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressZero()\":[{\"notice\":\"Thrown when the address is zero.\"}]},\"events\":{\"EmergencyRescued(address,uint256,address)\":{\"notice\":\"Emitted when tokens are rescued in an emergency\"},\"MigrationMessageSent(bytes32,uint32,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a migration message is sent\"}},\"kind\":\"user\",\"methods\":{\"MIMO()\":{\"notice\":\"MIMO contract token\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"constructor\":{\"notice\":\"Initializes the PeripheralMigrationContract\"},\"emergencyRescue(address,uint256)\":{\"notice\":\"Allows the owner to rescue any ERC20 token from the contract in case of emergency\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"migrateToPRL(address,uint256,uint32,bytes,bytes)\":{\"notice\":\"Migrates MIMO tokens to PRL tokens on another chain\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"pause()\":{\"notice\":\"Allow owner to pause the contract\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"quote(uint32,address,uint256,bytes,bytes)\":{\"notice\":\"Returns the estimated messaging fee for a given message.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"},\"unpause()\":{\"notice\":\"Allow owner to unpause the contract\"}},\"notice\":\"Contract that send message to the PrincipalMigrationContract and own MIMO migrated from it.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/peripheral/PeripheralMigrationContract.sol\":\"PeripheralMigrationContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5275636cd47e660a2fdf6c7fe9d41ff3cc866b785cc8a9d88c1b8ca983509f01\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/layerZero/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport { MessagingReceipt, MessagingFee } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol\\\";\\n\\n/// @dev Struct representing token parameters for the OFT send() operation.\\nstruct SendParam {\\n    uint32 dstEid; // Destination endpoint ID.\\n    bytes32 to; // Recipient address.\\n    uint256 amount; // Amount to send.\\n    uint256 minAmount; // Minimum amount to send.\\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\\n    bytes composeMsg; // The composed message for the send() operation.\\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\\n}\\n\\n/// @dev Struct representing OFT limit information.\\n/// @dev These amounts can change dynamically and are up the the specific oft implementation.\\nstruct OFTLimit {\\n    uint256 minAmount; // Minimum amount that can be sent to the recipient.\\n    uint256 maxAmount; // Maximum amount that can be sent to the recipient.\\n}\\n\\n/// @dev Struct representing OFT receipt information.\\nstruct OFTReceipt {\\n    uint256 amountSent; // Amount of tokens ACTUALLY debited from the sender.\\n    // @dev In non-default implementations, the amountReceived COU differ from this value.\\n    uint256 amountReceived; // Amount of tokens to be received on the remote side.\\n}\\n\\n/// @dev Struct representing OFT fee details.\\n/// @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\\nstruct OFTFeeDetail {\\n    int256 feeAmount; // Amount of the fee.\\n    string description; // Description of the fee.\\n}\\n\\n/// @title IOFTCore\\n/// @author Forked from\\n/// https://github.com/LayerZero-Labs/LayerZero-v2/blob/main/packages/layerzero-v2/evm/oapp/contracts/oft/IOFT.sol\\n/// @dev Modifications made by Cooper Labs. Removing sharedDecimals/decimalConversionRate feature.\\n/// @dev Interface for the OftChain (OFT) token.\\n/// @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\\n/// @dev This specific interface ID is '0x18fb6cf8'.\\ninterface IOFT {\\n    error SlippageExceeded(uint256 amount, uint256 minAmount);\\n\\n    // Events\\n    // GUID of the OFT message.\\n    // Destination Endpoint ID.\\n    // Address of the sender on the src chain.\\n    // Amount of tokens sent.\\n    // Amount of tokens received.\\n    event OFTSent(\\n        bytes32 indexed guid, uint32 dstEid, address indexed fromAddress, uint256 amountSent, uint256 amountReceived\\n    );\\n\\n    // GUID of the OFT message.\\n    // Source Endpoint ID.\\n    // Address of the recipient on the dst chain.\\n    // Amount of tokens received.\\n    event OFTReceived(bytes32 indexed guid, uint32 srcEid, address indexed toAddress, uint256 amountReceived);\\n\\n    /// @notice Retrieves interfaceID and the version of the OFT.\\n    /// @return interfaceId The interface ID.\\n    /// @return version The version.\\n    /// @dev interfaceId: This specific interface ID is '0x18fb6cf8'.\\n    /// @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\\n    /// @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\\n    /// ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\\n\\n    /// @notice Retrieves the address of the token associated with the OFT.\\n    /// @return token The address of the ERC20 token implementation.\\n    function token() external view returns (address);\\n\\n    /// @notice Provides a quote for OFT-related operations.\\n    /// @param _sendParam The parameters for the send operation.\\n    /// @return limit The OFT limit information.\\n    /// @return oftFeeDetails The details of OFT fees.\\n    /// @return receipt The OFT receipt information.\\n    function quoteOFT(SendParam calldata _sendParam)\\n        external\\n        view\\n        returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\\n\\n    /// @notice Provides a quote for the send() operation.\\n    /// @param _sendParam The parameters for the send() operation.\\n    /// @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\\n    /// @return fee The calculated LayerZero messaging fee from the send() operation.\\n    /// @dev MessagingFee: LayerZero msg fee\\n    ///  - nativeFee: The native fee.\\n    ///  - lzTokenFee: The lzToken fee.\\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\\n\\n    /// @notice Executes the send() operation.\\n    /// @param _sendParam The parameters for the send operation.\\n    /// @param _fee The fee information supplied by the caller.\\n    ///      - nativeFee: The native fee.\\n    ///      - lzTokenFee: The lzToken fee.\\n    /// @param _refundAddress The address to receive any excess funds from fees etc. on the src.\\n    /// @return receipt The LayerZero messaging receipt from the send() operation.\\n    /// @return oftReceipt The OFT receipt information.\\n    /// @dev MessagingReceipt: LayerZero msg receipt\\n    ///  - guid: The unique identifier for the sent message.\\n    ///  - nonce: The nonce of the sent message.\\n    ///  - fee: The LayerZero fee incurred for the message.\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    )\\n        external\\n        payable\\n        returns (MessagingReceipt memory, OFTReceipt memory);\\n}\\n\",\"keccak256\":\"0x22dec0722522ef24b1bb3e784dbf5cf3b6619f041d1f8b01c4b2db13a35d670e\",\"license\":\"MIT\"},\"contracts/layerZero/libs/OFTMsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\n/// @title OFTMsgCodec\\n/// @author Forked from\\n/// https://github.com/LayerZero-Labs/LayerZero-v2/blob/main/packages/layerzero-v2/evm/oapp/contracts/oft/libs/OFTMsgCodec.sol\\n/// @dev Modifications made by Cooper Labs. Removed 'SD' (Shared Decimals) related code.\\nlibrary OFTMsgCodec {\\n    // Offset constants for encoding and decoding OFT messages\\n    uint8 private constant SEND_TO_OFFSET = 32;\\n    uint8 private constant SEND_AMOUNT_OFFSET = 64;\\n\\n    /// @dev Encodes an OFT LayerZero message.\\n    /// @param _sendTo The recipient address.\\n    /// @param _amount The amount.\\n    /// @param _composeMsg The composed message.\\n    /// @return _msg The encoded message.\\n    /// @return hasCompose A boolean indicating whether the message has a composed payload.\\n    function encode(\\n        bytes32 _sendTo,\\n        uint256 _amount,\\n        bytes memory _composeMsg\\n    )\\n        internal\\n        view\\n        returns (bytes memory _msg, bool hasCompose)\\n    {\\n        hasCompose = _composeMsg.length > 0;\\n        // @dev Remote chains will want to know the composed function caller ie. msg.sender on the src.\\n        _msg = hasCompose\\n            ? abi.encodePacked(_sendTo, _amount, addressToBytes32(msg.sender), _composeMsg)\\n            : abi.encodePacked(_sendTo, _amount);\\n    }\\n\\n    /// @dev Checks if the OFT message is composed.\\n    /// @param _msg The OFT message.\\n    /// @return A boolean indicating whether the message is composed.\\n    function isComposed(bytes calldata _msg) internal pure returns (bool) {\\n        return _msg.length > SEND_AMOUNT_OFFSET;\\n    }\\n\\n    /// @dev Retrieves the recipient address from the OFT message.\\n    /// @param _msg The OFT message.\\n    /// @return The recipient address.\\n    function sendTo(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[:SEND_TO_OFFSET]);\\n    }\\n\\n    /// @dev Retrieves the amount from the OFT message.\\n    /// @param _msg The OFT message.\\n    /// @return The amount.\\n    function amount(bytes calldata _msg) internal pure returns (uint256) {\\n        return uint256(bytes32(_msg[SEND_TO_OFFSET:SEND_AMOUNT_OFFSET]));\\n    }\\n\\n    /// @dev Retrieves the composed message from the OFT message.\\n    /// @param _msg The OFT message.\\n    /// @return The composed message.\\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\\n        return _msg[SEND_AMOUNT_OFFSET:];\\n    }\\n\\n    /// @dev Converts an address to bytes32.\\n    /// @param _addr The address to convert.\\n    /// @return The bytes32 representation of the address.\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    /// @dev Converts bytes32 to an address.\\n    /// @param _b The bytes32 value to convert.\\n    /// @return The address representation of bytes32.\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint256(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0x85c5b9b7d92fb6b6561cc07b55ce91bc548755cdb54747aaaf80d381924eaf3a\",\"license\":\"MIT\"},\"contracts/libraries/ErrorsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\n/// @title ErrorsLib\\n/// @author Cooper Labs\\n/// @custom:contact security@cooperlabs.xyz\\n/// @notice Library exposing all commun errors.\\nlibrary ErrorsLib {\\n    /// @notice Thrown when the address is zero.\\n    error AddressZero();\\n\\n    /// @notice Thrown when the msg length is invalid.\\n    error InvalidMsgLength();\\n}\\n\",\"keccak256\":\"0x56f97bcf36d9f8d4785126d6a7720f5538c276a9afb2817c9591ec8db4e17bee\",\"license\":\"MIT\"},\"contracts/peripheral/PeripheralMigrationContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\nimport { OAppSender } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol\\\";\\nimport { OAppCore } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppCore.sol\\\";\\nimport { OAppOptionsType3 } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\n\\nimport { OFTMsgCodec } from \\\"contracts/layerZero/libs/OFTMsgCodec.sol\\\";\\nimport { MessagingFee, MessagingReceipt } from \\\"contracts/layerZero/interfaces/IOFT.sol\\\";\\n\\nimport { ErrorsLib } from \\\"contracts/libraries/ErrorsLib.sol\\\";\\n\\n/// @title PeripheralMigrationContract\\n/// @author Cooper Labs\\n/// @custom:contact security@cooperlabs.xyz\\n/// @notice Contract that send message to the PrincipalMigrationContract and own MIMO migrated from it.\\ncontract PeripheralMigrationContract is OAppSender, OAppOptionsType3, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    uint16 public constant SEND = 1;\\n    uint16 public constant SEND_AND_MIGRATE = 2;\\n    uint256 private constant EXTRA_OPTION_START = 160;\\n\\n    /// MIMO contract token\\n    IERC20 public immutable MIMO;\\n\\n    uint32 public immutable mainEid;\\n\\n    //-------------------------------------------\\n    // Events\\n    //-------------------------------------------\\n\\n    /// @notice Emitted when a migration message is sent\\n    /// @param guid The unique identifier of the sent message\\n    /// @param dstEid The destination endpoint ID\\n    /// @param from The address sending the migration\\n    /// @param to The address receiving the migrated tokens\\n    /// @param nativeFeeAmount The amount of native fee paid for the message\\n    /// @param amountSent The amount of tokens being migrated\\n    event MigrationMessageSent(\\n        bytes32 guid, uint32 dstEid, address from, address to, uint256 nativeFeeAmount, uint256 amountSent\\n    );\\n\\n    /// @notice Emitted when tokens are rescued in an emergency\\n    /// @param token The address of the rescued token\\n    /// @param amount The amount of tokens rescued\\n    /// @param recipient The address that received the rescued tokens\\n    event EmergencyRescued(address indexed token, uint256 amount, address indexed recipient);\\n\\n    //-------------------------------------------\\n    // Constructor\\n    //-------------------------------------------\\n\\n    /// @notice Initializes the PeripheralMigrationContract\\n    /// @param _mimo Address of the MIMO token contract\\n    /// @param _endpoint Address of the LayerZero endpoint\\n    /// @param _owner Address of the contract owner\\n    /// @param _mainEid Endpoint ID of the main chain where the PrincipalMigrationContract is deployed\\n    constructor(\\n        address _mimo,\\n        address _endpoint,\\n        address _owner,\\n        uint32 _mainEid\\n    )\\n        OAppCore(_endpoint, _owner)\\n        Ownable(_owner)\\n    {\\n        if (_mimo == address(0)) revert ErrorsLib.AddressZero();\\n        MIMO = IERC20(_mimo);\\n        mainEid = _mainEid;\\n    }\\n\\n    //-------------------------------------------\\n    // External functions\\n    //-------------------------------------------\\n\\n    /// @notice Migrates MIMO tokens to PRL tokens on another chain\\n    /// @param _receiver The address that will receive the PRL tokens\\n    /// @param _amount The amount of MIMO tokens to migrate\\n    /// @param _dstEid The destination endpoint ID\\n    /// @param _extraSendOptions Gas settings for A -> Main Chain\\n    /// @param _extraReturnOptions Gas settings for Main Chain -> Final chain\\n    /// @return msgReceipt The receipt of the LayerZero message\\n    function migrateToPRL(\\n        address _receiver,\\n        uint256 _amount,\\n        uint32 _dstEid,\\n        bytes calldata _extraSendOptions,\\n        bytes calldata _extraReturnOptions\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n        returns (MessagingReceipt memory msgReceipt)\\n    {\\n        uint256 fee = msg.value;\\n        bytes memory options =\\n            combineOptions(_dstEid, _extraSendOptions.length > 0 ? SEND_AND_MIGRATE : SEND, _extraSendOptions);\\n\\n        emit MigrationMessageSent(msgReceipt.guid, _dstEid, msg.sender, _receiver, fee, _amount);\\n        MIMO.safeTransferFrom(msg.sender, address(this), _amount);\\n        msgReceipt = _lzSend(\\n            mainEid,\\n            _encodeMessage(_receiver, _amount, _dstEid, _extraReturnOptions),\\n            options,\\n            // Fee in native gas and ZRO token.\\n            MessagingFee(msg.value, 0),\\n            // Refund address in case of failed source message.\\n            payable(msg.sender)\\n        );\\n    }\\n\\n    /// @notice Returns the estimated messaging fee for a given message.\\n    /// @param _dstEid Destination endpoint ID where the message will be sent.\\n    /// @param _receiver Address that will receive the PRL token.abi\\n    /// @param _amount The amount of Mimo token to migrate.\\n    /// @param _extraSendOptions Gas options for receiving the send call (A -> B).\\n    /// @param _extraReturnOptions Additional gas options for the return call (B -> A).\\n    /// @return fee The estimated messaging fee.\\n    function quote(\\n        uint32 _dstEid,\\n        address _receiver,\\n        uint256 _amount,\\n        bytes calldata _extraSendOptions,\\n        bytes calldata _extraReturnOptions\\n    )\\n        public\\n        view\\n        returns (MessagingFee memory fee)\\n    {\\n        bytes memory payload = _encodeMessage(_receiver, _amount, _dstEid, _extraReturnOptions);\\n        bytes memory options =\\n            combineOptions(mainEid, _extraSendOptions.length > 0 ? SEND_AND_MIGRATE : SEND, _extraSendOptions);\\n        fee = _quote(mainEid, payload, options, false);\\n    }\\n\\n    //-------------------------------------------\\n    // OnlyOwner functions\\n    //-------------------------------------------\\n\\n    /// @notice Allows the owner to rescue any ERC20 token from the contract in case of emergency\\n    /// @dev This function can only be called by the owner and only when the contract is paused\\n    /// @param _token The address of the ERC20 token to rescue\\n    /// @param _amount The amount of tokens to rescue\\n    function emergencyRescue(address _token, uint256 _amount) external onlyOwner whenPaused {\\n        emit EmergencyRescued(_token, _amount, msg.sender);\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /// @notice Allow owner to pause the contract\\n    /// @dev This function can only be called by the owner\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Allow owner to unpause the contract\\n    /// @dev This function can only be called by the owner\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    //-------------------------------------------\\n    // Internal functions\\n    //-------------------------------------------\\n\\n    /// @notice Encodes the migration message\\n    /// @param _receiver The address that will receive the PRL tokens\\n    /// @param _amount The amount of MIMO tokens to migrate\\n    /// @param _dstEid The destination endpoint ID\\n    /// @param _extraReturnOptions Additional gas options for the return call (B -> A)\\n    /// @return The encoded message\\n    function _encodeMessage(\\n        address _receiver,\\n        uint256 _amount,\\n        uint32 _dstEid,\\n        bytes memory _extraReturnOptions\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        // Get the length of _extraReturnOptions\\n        uint256 extraOptionsLength = _extraReturnOptions.length;\\n\\n        // Encode the entire message, prepend and append the length of _extraReturnOptions\\n        return abi.encode(\\n            OFTMsgCodec.addressToBytes32(_receiver), _amount, _dstEid, extraOptionsLength, _extraReturnOptions\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xea76929155ba4c4bb29fcfd5fe5c8c31676e6e4b703fe7f3e20ac4def5162a8e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051611f68380380611f6883398101604081905261002f916101b4565b8282806001600160a01b03811661006057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006981610148565b506001600160a01b03808316608052811661009757604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b1580156100de57600080fd5b505af11580156100f2573d6000803e3d6000fd5b50506003805460ff191690555050506001600160a01b038516905061012a57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0390931660a052505063ffffffff1660c052610213565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146101af57600080fd5b919050565b600080600080608085870312156101ca57600080fd5b6101d385610198565b93506101e160208601610198565b92506101ef60408601610198565b9150606085015163ffffffff8116811461020857600080fd5b939692955090935050565b60805160a05160c051611ce7610281600039600081816103810152818161056101528181610664015261069601526000818161034d01526105340152600081816102b901528181610a0e01528181610bf701528181610d80015281816111c101526112930152611ce76000f3fe60806040526004361061016a5760003560e01c8063715018a6116100cb578063b72952ee1161007f578063bc70b35411610059578063bc70b35414610433578063ca5eb5e114610453578063f2fde38b1461047357600080fd5b8063b72952ee146103b8578063b98bd070146103d8578063bb0b6a53146103f857600080fd5b80638da5cb5b116100b05780638da5cb5b1461031d578063a00e07c41461033b578063b67d54331461036f57600080fd5b8063715018a6146102f35780638456cb591461030857600080fd5b80633f4ba83a116101225780635535d461116101075780635535d461146102575780635c975abb146102845780635e280f11146102a757600080fd5b80633f4ba83a1461022d578063405ba5431461024257600080fd5b8063320e2ebf11610153578063320e2ebf146101be5780633400288b146101de578063361f09071461020057600080fd5b806317442b701461016f5780631f5e133414610196575b600080fd5b34801561017b57600080fd5b50604080516001815260006020820152015b60405180910390f35b3480156101a257600080fd5b506101ab600181565b60405161ffff909116815260200161018d565b6101d16101cc3660046113d2565b610493565b60405161018d919061146f565b3480156101ea57600080fd5b506101fe6101f93660046114b2565b6105ed565b005b34801561020c57600080fd5b5061022061021b3660046114dc565b610603565b60405161018d9190611534565b34801561023957600080fd5b506101fe6106be565b34801561024e57600080fd5b506101ab600281565b34801561026357600080fd5b5061027761027236600461155d565b6106d0565b60405161018d91906115e0565b34801561029057600080fd5b5060035460ff16604051901515815260200161018d565b3480156102b357600080fd5b506102db7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b3480156102ff57600080fd5b506101fe610775565b34801561031457600080fd5b506101fe610787565b34801561032957600080fd5b506000546001600160a01b03166102db565b34801561034757600080fd5b506102db7f000000000000000000000000000000000000000000000000000000000000000081565b34801561037b57600080fd5b506103a37f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161018d565b3480156103c457600080fd5b506101fe6103d33660046115fa565b610797565b3480156103e457600080fd5b506101fe6103f3366004611618565b6107fb565b34801561040457600080fd5b5061042561041336600461168d565b60016020526000908152604090205481565b60405190815260200161018d565b34801561043f57600080fd5b5061027761044e3660046116a8565b610815565b34801561045f57600080fd5b506101fe61046e366004611709565b6109ce565b34801561047f57600080fd5b506101fe61048e366004611709565b610a6d565b61049b611313565b6104a3610ac4565b3460006104c088876104b65760016104b9565b60025b8989610815565b83516040805191825263ffffffff8b16602083015233908201526001600160a01b038c1660608201526080810184905260a081018b90529091507f3dd5b9e3159a840b8859b5bbb8860ecf1552297aa737e97a44bf51d3c927a32b9060c00160405180910390a161055c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308c610b01565b6105df7f00000000000000000000000000000000000000000000000000000000000000006105c28c8c8c8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b8392505050565b836040518060400160405280348152602001600081525033610bc4565b9a9950505050505050505050565b6105f5610ccf565b6105ff8282610d15565b5050565b6040805180820190915260008082526020820152600061065b88888b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b8392505050565b9050600061068f7f0000000000000000000000000000000000000000000000000000000000000000876104b65760016104b9565b90506105df7f000000000000000000000000000000000000000000000000000000000000000083836000610d6a565b6106c6610ccf565b6106ce610e4b565b565b6002602090815260009283526040808420909152908252902080546106f490611726565b80601f016020809104026020016040519081016040528092919081815260200182805461072090611726565b801561076d5780601f106107425761010080835404028352916020019161076d565b820191906000526020600020905b81548152906001019060200180831161075057829003601f168201915b505050505081565b61077d610ccf565b6106ce6000610e9d565b61078f610ccf565b6106ce610f05565b61079f610ccf565b6107a7610f42565b60405181815233906001600160a01b038416907f050bfcf56def683ba46089b74b240740900eb3e22309f1a9a50cdad12e7a43b29060200160405180910390a36105ff6001600160a01b0383163383610f7e565b610803610ccf565b6105ff61081082846117d0565b610fb4565b63ffffffff8416600090815260026020908152604080832061ffff8716845290915281208054606092919061084990611726565b80601f016020809104026020016040519081016040528092919081815260200182805461087590611726565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b5050505050905080516000036109125783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294506109c69350505050565b60008390036109225790506109c6565b600283106109a05761096984848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110c692505050565b8061097784600281886118f6565b60405160200161098993929190611920565b6040516020818303038152906040529150506109c6565b8383604051639a6d49cd60e01b81526004016109bd929190611948565b60405180910390fd5b949350505050565b6109d6610ccf565b6040517fca5eb5e10000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b5050505050565b610a75610ccf565b6001600160a01b038116610ab8576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016109bd565b610ac181610e9d565b50565b60035460ff16156106ce576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b038481166024830152838116604483015260648201839052610b7d9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110f2565b50505050565b80516060906001600160a01b03861685858386604051602001610baa959493929190611977565b604051602081830303815290604052915050949350505050565b610bcc611313565b6000610bdb846000015161117c565b602085015190915015610bf557610bf584602001516111bd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff168152602001610c458c6112b8565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b8152600401610c819291906119a8565b60806040518083038185885af1158015610c9f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610cc49190611a70565b979650505050505050565b6000546001600160a01b031633146106ce576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016109bd565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001610dcd896112b8565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401610e029291906119a8565b6040805180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190611ac7565b95945050505050565b610e53610f42565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f0d610ac4565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e803390565b60035460ff166106ce576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b03838116602483015260448201839052610faf91859182169063a9059cbb90606401610b36565b505050565b60005b815181101561108b57610fe6828281518110610fd557610fd5611ae3565b6020026020010151604001516110c6565b818181518110610ff857610ff8611ae3565b6020026020010151604001516002600084848151811061101a5761101a611ae3565b60200260200101516000015163ffffffff1663ffffffff168152602001908152602001600020600084848151811061105457611054611ae3565b60200260200101516020015161ffff1661ffff16815260200190815260200160002090816110829190611b49565b50600101610fb7565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674816040516110bb9190611c09565b60405180910390a150565b600281015161ffff81166003146105ff5781604051639a6d49cd60e01b81526004016109bd91906115e0565b600080602060008451602086016000885af180611115576040513d6000823e3d81fd5b50506000513d9150811561112d57806001141561113a565b6001600160a01b0384163b155b15610b7d576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016109bd565b60008134146111b9576040517f9f7041200000000000000000000000000000000000000000000000000000000081523460048201526024016109bd565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112419190611c94565b90506001600160a01b038116611283576040517f5373352a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105ff6001600160a01b038216337f000000000000000000000000000000000000000000000000000000000000000085610b01565b63ffffffff81166000908152600160205260408120548061130d576040517ff6ff4fb700000000000000000000000000000000000000000000000000000000815263ffffffff841660048201526024016109bd565b92915050565b604051806060016040528060008019168152602001600067ffffffffffffffff168152602001611356604051806040016040528060008152602001600081525090565b905290565b6001600160a01b0381168114610ac157600080fd5b803563ffffffff8116811461138457600080fd5b919050565b60008083601f84011261139b57600080fd5b50813567ffffffffffffffff8111156113b357600080fd5b6020830191508360208285010111156113cb57600080fd5b9250929050565b600080600080600080600060a0888a0312156113ed57600080fd5b87356113f88161135b565b96506020880135955061140d60408901611370565b9450606088013567ffffffffffffffff8082111561142a57600080fd5b6114368b838c01611389565b909650945060808a013591508082111561144f57600080fd5b5061145c8a828b01611389565b989b979a50959850939692959293505050565b60006080820190508251825267ffffffffffffffff602084015116602083015260408301516114ab604084018280518252602090810151910152565b5092915050565b600080604083850312156114c557600080fd5b6114ce83611370565b946020939093013593505050565b600080600080600080600060a0888a0312156114f757600080fd5b61150088611370565b965060208801356115108161135b565b955060408801359450606088013567ffffffffffffffff8082111561142a57600080fd5b81518152602080830151908201526040810161130d565b803561ffff8116811461138457600080fd5b6000806040838503121561157057600080fd5b61157983611370565b91506115876020840161154b565b90509250929050565b60005b838110156115ab578181015183820152602001611593565b50506000910152565b600081518084526115cc816020860160208601611590565b601f01601f19169290920160200192915050565b6020815260006115f360208301846115b4565b9392505050565b6000806040838503121561160d57600080fd5b82356114ce8161135b565b6000806020838503121561162b57600080fd5b823567ffffffffffffffff8082111561164357600080fd5b818501915085601f83011261165757600080fd5b81358181111561166657600080fd5b8660208260051b850101111561167b57600080fd5b60209290920196919550909350505050565b60006020828403121561169f57600080fd5b6115f382611370565b600080600080606085870312156116be57600080fd5b6116c785611370565b93506116d56020860161154b565b9250604085013567ffffffffffffffff8111156116f157600080fd5b6116fd87828801611389565b95989497509550505050565b60006020828403121561171b57600080fd5b81356115f38161135b565b600181811c9082168061173a57607f821691505b60208210810361175a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561179957611799611760565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117c8576117c8611760565b604052919050565b600067ffffffffffffffff808411156117eb576117eb611760565b8360051b60206117fc81830161179f565b86815291850191818101903684111561181457600080fd5b865b848110156118ea5780358681111561182e5760008081fd5b880160603682900312156118425760008081fd5b61184a611776565b61185382611370565b815261186086830161154b565b86820152604080830135898111156118785760008081fd5b9290920191601f368185011261188e5760008081fd5b83358a8111156118a0576118a0611760565b6118b1818301601f19168a0161179f565b915080825236898287010111156118c85760008081fd5b808986018a840137600090820189015290820152845250918301918301611816565b50979650505050505050565b6000808585111561190657600080fd5b8386111561191357600080fd5b5050820193919092039150565b60008451611932818460208901611590565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b85815284602082015263ffffffff8416604082015282606082015260a060808201526000610cc460a08301846115b4565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526119de60e08401826115b4565b90506060850151603f198483030160a08501526119fb82826115b4565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215611a3357600080fd5b6040516040810181811067ffffffffffffffff82111715611a5657611a56611760565b604052825181526020928301519281019290925250919050565b600060808284031215611a8257600080fd5b611a8a611776565b82518152602083015167ffffffffffffffff81168114611aa957600080fd5b6020820152611abb8460408501611a21565b60408201529392505050565b600060408284031215611ad957600080fd5b6115f38383611a21565b634e487b7160e01b600052603260045260246000fd5b601f821115610faf576000816000526020600020601f850160051c81016020861015611b225750805b601f850160051c820191505b81811015611b4157828155600101611b2e565b505050505050565b815167ffffffffffffffff811115611b6357611b63611760565b611b7781611b718454611726565b84611af9565b602080601f831160018114611bac5760008415611b945750858301515b600019600386901b1c1916600185901b178555611b41565b600085815260208120601f198616915b82811015611bdb57888601518255948401946001909101908401611bbc565b5085821015611bf95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015611c8657888303603f190185528151805163ffffffff1684528781015161ffff16888501528601516060878501819052611c72818601836115b4565b968901969450505090860190600101611c32565b509098975050505050505050565b600060208284031215611ca657600080fd5b81516115f38161135b56fea2646970667358221220e4bfdcaf9d21d123031d540fbcbb8d966dbe37f86decfccae290e83e44f9f26064736f6c63430008190033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c8063715018a6116100cb578063b72952ee1161007f578063bc70b35411610059578063bc70b35414610433578063ca5eb5e114610453578063f2fde38b1461047357600080fd5b8063b72952ee146103b8578063b98bd070146103d8578063bb0b6a53146103f857600080fd5b80638da5cb5b116100b05780638da5cb5b1461031d578063a00e07c41461033b578063b67d54331461036f57600080fd5b8063715018a6146102f35780638456cb591461030857600080fd5b80633f4ba83a116101225780635535d461116101075780635535d461146102575780635c975abb146102845780635e280f11146102a757600080fd5b80633f4ba83a1461022d578063405ba5431461024257600080fd5b8063320e2ebf11610153578063320e2ebf146101be5780633400288b146101de578063361f09071461020057600080fd5b806317442b701461016f5780631f5e133414610196575b600080fd5b34801561017b57600080fd5b50604080516001815260006020820152015b60405180910390f35b3480156101a257600080fd5b506101ab600181565b60405161ffff909116815260200161018d565b6101d16101cc3660046113d2565b610493565b60405161018d919061146f565b3480156101ea57600080fd5b506101fe6101f93660046114b2565b6105ed565b005b34801561020c57600080fd5b5061022061021b3660046114dc565b610603565b60405161018d9190611534565b34801561023957600080fd5b506101fe6106be565b34801561024e57600080fd5b506101ab600281565b34801561026357600080fd5b5061027761027236600461155d565b6106d0565b60405161018d91906115e0565b34801561029057600080fd5b5060035460ff16604051901515815260200161018d565b3480156102b357600080fd5b506102db7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b3480156102ff57600080fd5b506101fe610775565b34801561031457600080fd5b506101fe610787565b34801561032957600080fd5b506000546001600160a01b03166102db565b34801561034757600080fd5b506102db7f000000000000000000000000000000000000000000000000000000000000000081565b34801561037b57600080fd5b506103a37f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161018d565b3480156103c457600080fd5b506101fe6103d33660046115fa565b610797565b3480156103e457600080fd5b506101fe6103f3366004611618565b6107fb565b34801561040457600080fd5b5061042561041336600461168d565b60016020526000908152604090205481565b60405190815260200161018d565b34801561043f57600080fd5b5061027761044e3660046116a8565b610815565b34801561045f57600080fd5b506101fe61046e366004611709565b6109ce565b34801561047f57600080fd5b506101fe61048e366004611709565b610a6d565b61049b611313565b6104a3610ac4565b3460006104c088876104b65760016104b9565b60025b8989610815565b83516040805191825263ffffffff8b16602083015233908201526001600160a01b038c1660608201526080810184905260a081018b90529091507f3dd5b9e3159a840b8859b5bbb8860ecf1552297aa737e97a44bf51d3c927a32b9060c00160405180910390a161055c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308c610b01565b6105df7f00000000000000000000000000000000000000000000000000000000000000006105c28c8c8c8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b8392505050565b836040518060400160405280348152602001600081525033610bc4565b9a9950505050505050505050565b6105f5610ccf565b6105ff8282610d15565b5050565b6040805180820190915260008082526020820152600061065b88888b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b8392505050565b9050600061068f7f0000000000000000000000000000000000000000000000000000000000000000876104b65760016104b9565b90506105df7f000000000000000000000000000000000000000000000000000000000000000083836000610d6a565b6106c6610ccf565b6106ce610e4b565b565b6002602090815260009283526040808420909152908252902080546106f490611726565b80601f016020809104026020016040519081016040528092919081815260200182805461072090611726565b801561076d5780601f106107425761010080835404028352916020019161076d565b820191906000526020600020905b81548152906001019060200180831161075057829003601f168201915b505050505081565b61077d610ccf565b6106ce6000610e9d565b61078f610ccf565b6106ce610f05565b61079f610ccf565b6107a7610f42565b60405181815233906001600160a01b038416907f050bfcf56def683ba46089b74b240740900eb3e22309f1a9a50cdad12e7a43b29060200160405180910390a36105ff6001600160a01b0383163383610f7e565b610803610ccf565b6105ff61081082846117d0565b610fb4565b63ffffffff8416600090815260026020908152604080832061ffff8716845290915281208054606092919061084990611726565b80601f016020809104026020016040519081016040528092919081815260200182805461087590611726565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b5050505050905080516000036109125783838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294506109c69350505050565b60008390036109225790506109c6565b600283106109a05761096984848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110c692505050565b8061097784600281886118f6565b60405160200161098993929190611920565b6040516020818303038152906040529150506109c6565b8383604051639a6d49cd60e01b81526004016109bd929190611948565b60405180910390fd5b949350505050565b6109d6610ccf565b6040517fca5eb5e10000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b5050505050565b610a75610ccf565b6001600160a01b038116610ab8576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016109bd565b610ac181610e9d565b50565b60035460ff16156106ce576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b038481166024830152838116604483015260648201839052610b7d9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110f2565b50505050565b80516060906001600160a01b03861685858386604051602001610baa959493929190611977565b604051602081830303815290604052915050949350505050565b610bcc611313565b6000610bdb846000015161117c565b602085015190915015610bf557610bf584602001516111bd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff168152602001610c458c6112b8565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b8152600401610c819291906119a8565b60806040518083038185885af1158015610c9f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610cc49190611a70565b979650505050505050565b6000546001600160a01b031633146106ce576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016109bd565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001610dcd896112b8565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401610e029291906119a8565b6040805180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190611ac7565b95945050505050565b610e53610f42565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f0d610ac4565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e803390565b60035460ff166106ce576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b03838116602483015260448201839052610faf91859182169063a9059cbb90606401610b36565b505050565b60005b815181101561108b57610fe6828281518110610fd557610fd5611ae3565b6020026020010151604001516110c6565b818181518110610ff857610ff8611ae3565b6020026020010151604001516002600084848151811061101a5761101a611ae3565b60200260200101516000015163ffffffff1663ffffffff168152602001908152602001600020600084848151811061105457611054611ae3565b60200260200101516020015161ffff1661ffff16815260200190815260200160002090816110829190611b49565b50600101610fb7565b507fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b674816040516110bb9190611c09565b60405180910390a150565b600281015161ffff81166003146105ff5781604051639a6d49cd60e01b81526004016109bd91906115e0565b600080602060008451602086016000885af180611115576040513d6000823e3d81fd5b50506000513d9150811561112d57806001141561113a565b6001600160a01b0384163b155b15610b7d576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016109bd565b60008134146111b9576040517f9f7041200000000000000000000000000000000000000000000000000000000081523460048201526024016109bd565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112419190611c94565b90506001600160a01b038116611283576040517f5373352a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105ff6001600160a01b038216337f000000000000000000000000000000000000000000000000000000000000000085610b01565b63ffffffff81166000908152600160205260408120548061130d576040517ff6ff4fb700000000000000000000000000000000000000000000000000000000815263ffffffff841660048201526024016109bd565b92915050565b604051806060016040528060008019168152602001600067ffffffffffffffff168152602001611356604051806040016040528060008152602001600081525090565b905290565b6001600160a01b0381168114610ac157600080fd5b803563ffffffff8116811461138457600080fd5b919050565b60008083601f84011261139b57600080fd5b50813567ffffffffffffffff8111156113b357600080fd5b6020830191508360208285010111156113cb57600080fd5b9250929050565b600080600080600080600060a0888a0312156113ed57600080fd5b87356113f88161135b565b96506020880135955061140d60408901611370565b9450606088013567ffffffffffffffff8082111561142a57600080fd5b6114368b838c01611389565b909650945060808a013591508082111561144f57600080fd5b5061145c8a828b01611389565b989b979a50959850939692959293505050565b60006080820190508251825267ffffffffffffffff602084015116602083015260408301516114ab604084018280518252602090810151910152565b5092915050565b600080604083850312156114c557600080fd5b6114ce83611370565b946020939093013593505050565b600080600080600080600060a0888a0312156114f757600080fd5b61150088611370565b965060208801356115108161135b565b955060408801359450606088013567ffffffffffffffff8082111561142a57600080fd5b81518152602080830151908201526040810161130d565b803561ffff8116811461138457600080fd5b6000806040838503121561157057600080fd5b61157983611370565b91506115876020840161154b565b90509250929050565b60005b838110156115ab578181015183820152602001611593565b50506000910152565b600081518084526115cc816020860160208601611590565b601f01601f19169290920160200192915050565b6020815260006115f360208301846115b4565b9392505050565b6000806040838503121561160d57600080fd5b82356114ce8161135b565b6000806020838503121561162b57600080fd5b823567ffffffffffffffff8082111561164357600080fd5b818501915085601f83011261165757600080fd5b81358181111561166657600080fd5b8660208260051b850101111561167b57600080fd5b60209290920196919550909350505050565b60006020828403121561169f57600080fd5b6115f382611370565b600080600080606085870312156116be57600080fd5b6116c785611370565b93506116d56020860161154b565b9250604085013567ffffffffffffffff8111156116f157600080fd5b6116fd87828801611389565b95989497509550505050565b60006020828403121561171b57600080fd5b81356115f38161135b565b600181811c9082168061173a57607f821691505b60208210810361175a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561179957611799611760565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117c8576117c8611760565b604052919050565b600067ffffffffffffffff808411156117eb576117eb611760565b8360051b60206117fc81830161179f565b86815291850191818101903684111561181457600080fd5b865b848110156118ea5780358681111561182e5760008081fd5b880160603682900312156118425760008081fd5b61184a611776565b61185382611370565b815261186086830161154b565b86820152604080830135898111156118785760008081fd5b9290920191601f368185011261188e5760008081fd5b83358a8111156118a0576118a0611760565b6118b1818301601f19168a0161179f565b915080825236898287010111156118c85760008081fd5b808986018a840137600090820189015290820152845250918301918301611816565b50979650505050505050565b6000808585111561190657600080fd5b8386111561191357600080fd5b5050820193919092039150565b60008451611932818460208901611590565b8201838582376000930192835250909392505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b85815284602082015263ffffffff8416604082015282606082015260a060808201526000610cc460a08301846115b4565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a060808401526119de60e08401826115b4565b90506060850151603f198483030160a08501526119fb82826115b4565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215611a3357600080fd5b6040516040810181811067ffffffffffffffff82111715611a5657611a56611760565b604052825181526020928301519281019290925250919050565b600060808284031215611a8257600080fd5b611a8a611776565b82518152602083015167ffffffffffffffff81168114611aa957600080fd5b6020820152611abb8460408501611a21565b60408201529392505050565b600060408284031215611ad957600080fd5b6115f38383611a21565b634e487b7160e01b600052603260045260246000fd5b601f821115610faf576000816000526020600020601f850160051c81016020861015611b225750805b601f850160051c820191505b81811015611b4157828155600101611b2e565b505050505050565b815167ffffffffffffffff811115611b6357611b63611760565b611b7781611b718454611726565b84611af9565b602080601f831160018114611bac5760008415611b945750858301515b600019600386901b1c1916600185901b178555611b41565b600085815260208120601f198616915b82811015611bdb57888601518255948401946001909101908401611bbc565b5085821015611bf95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015611c8657888303603f190185528151805163ffffffff1684528781015161ffff16888501528601516060878501819052611c72818601836115b4565b968901969450505090860190600101611c32565b509098975050505050505050565b600060208284031215611ca657600080fd5b81516115f38161135b56fea2646970667358221220e4bfdcaf9d21d123031d540fbcbb8d966dbe37f86decfccae290e83e44f9f26064736f6c63430008190033",
  "devdoc": {
    "author": "Cooper Labs",
    "custom:contact": "security@cooperlabs.xyz",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "EmergencyRescued(address,uint256,address)": {
        "params": {
          "amount": "The amount of tokens rescued",
          "recipient": "The address that received the rescued tokens",
          "token": "The address of the rescued token"
        }
      },
      "MigrationMessageSent(bytes32,uint32,address,address,uint256,uint256)": {
        "params": {
          "amountSent": "The amount of tokens being migrated",
          "dstEid": "The destination endpoint ID",
          "from": "The address sending the migration",
          "guid": "The unique identifier of the sent message",
          "nativeFeeAmount": "The amount of native fee paid for the message",
          "to": "The address receiving the migrated tokens"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "constructor": {
        "params": {
          "_endpoint": "Address of the LayerZero endpoint",
          "_mainEid": "Endpoint ID of the main chain where the PrincipalMigrationContract is deployed",
          "_mimo": "Address of the MIMO token contract",
          "_owner": "Address of the contract owner"
        }
      },
      "emergencyRescue(address,uint256)": {
        "details": "This function can only be called by the owner and only when the contract is paused",
        "params": {
          "_amount": "The amount of tokens to rescue",
          "_token": "The address of the ERC20 token to rescue"
        }
      },
      "migrateToPRL(address,uint256,uint32,bytes,bytes)": {
        "params": {
          "_amount": "The amount of MIMO tokens to migrate",
          "_dstEid": "The destination endpoint ID",
          "_extraReturnOptions": "Gas settings for Main Chain -> Final chain",
          "_extraSendOptions": "Gas settings for A -> Main Chain",
          "_receiver": "The address that will receive the PRL tokens"
        },
        "returns": {
          "msgReceipt": "The receipt of the LayerZero message"
        }
      },
      "oAppVersion()": {
        "details": "Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented. ie. this is a SEND only OApp.If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions",
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol contract.",
          "senderVersion": "The version of the OAppSender.sol contract."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "This function can only be called by the owner"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quote(uint32,address,uint256,bytes,bytes)": {
        "params": {
          "_amount": "The amount of Mimo token to migrate.",
          "_dstEid": "Destination endpoint ID where the message will be sent.",
          "_extraReturnOptions": "Additional gas options for the return call (B -> A).",
          "_extraSendOptions": "Gas options for receiving the send call (A -> B).",
          "_receiver": "Address that will receive the PRL token.abi"
        },
        "returns": {
          "fee": "The estimated messaging fee."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "This function can only be called by the owner"
      }
    },
    "title": "PeripheralMigrationContract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressZero()": [
        {
          "notice": "Thrown when the address is zero."
        }
      ]
    },
    "events": {
      "EmergencyRescued(address,uint256,address)": {
        "notice": "Emitted when tokens are rescued in an emergency"
      },
      "MigrationMessageSent(bytes32,uint32,address,address,uint256,uint256)": {
        "notice": "Emitted when a migration message is sent"
      }
    },
    "kind": "user",
    "methods": {
      "MIMO()": {
        "notice": "MIMO contract token"
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "constructor": {
        "notice": "Initializes the PeripheralMigrationContract"
      },
      "emergencyRescue(address,uint256)": {
        "notice": "Allows the owner to rescue any ERC20 token from the contract in case of emergency"
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "migrateToPRL(address,uint256,uint32,bytes,bytes)": {
        "notice": "Migrates MIMO tokens to PRL tokens on another chain"
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "pause()": {
        "notice": "Allow owner to pause the contract"
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "quote(uint32,address,uint256,bytes,bytes)": {
        "notice": "Returns the estimated messaging fee for a given message."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      },
      "unpause()": {
        "notice": "Allow owner to unpause the contract"
      }
    },
    "notice": "Contract that send message to the PrincipalMigrationContract and own MIMO migrated from it.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2620,
        "contract": "contracts/peripheral/PeripheralMigrationContract.sol:PeripheralMigrationContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 64,
        "contract": "contracts/peripheral/PeripheralMigrationContract.sol:PeripheralMigrationContract",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 680,
        "contract": "contracts/peripheral/PeripheralMigrationContract.sol:PeripheralMigrationContract",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 4671,
        "contract": "contracts/peripheral/PeripheralMigrationContract.sol:PeripheralMigrationContract",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}