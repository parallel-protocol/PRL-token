/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type SendParamStruct = {
  dstEid: BigNumberish;
  to: BytesLike;
  amount: BigNumberish;
  minAmount: BigNumberish;
  extraOptions: BytesLike;
  composeMsg: BytesLike;
  oftCmd: BytesLike;
};

export type SendParamStructOutput = [
  dstEid: bigint,
  to: string,
  amount: bigint,
  minAmount: bigint,
  extraOptions: string,
  composeMsg: string,
  oftCmd: string
] & {
  dstEid: bigint;
  to: string;
  amount: bigint;
  minAmount: bigint;
  extraOptions: string;
  composeMsg: string;
  oftCmd: string;
};

export type OFTLimitStruct = {
  minAmount: BigNumberish;
  maxAmount: BigNumberish;
};

export type OFTLimitStructOutput = [minAmount: bigint, maxAmount: bigint] & {
  minAmount: bigint;
  maxAmount: bigint;
};

export type OFTFeeDetailStruct = {
  feeAmount: BigNumberish;
  description: string;
};

export type OFTFeeDetailStructOutput = [
  feeAmount: bigint,
  description: string
] & { feeAmount: bigint; description: string };

export type OFTReceiptStruct = {
  amountSent: BigNumberish;
  amountReceived: BigNumberish;
};

export type OFTReceiptStructOutput = [
  amountSent: bigint,
  amountReceived: bigint
] & { amountSent: bigint; amountReceived: bigint };

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [
  nativeFee: bigint,
  lzTokenFee: bigint
] & { nativeFee: bigint; lzTokenFee: bigint };

export type MessagingReceiptStruct = {
  guid: BytesLike;
  nonce: BigNumberish;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  guid: string,
  nonce: bigint,
  fee: MessagingFeeStructOutput
] & { guid: string; nonce: bigint; fee: MessagingFeeStructOutput };

export interface IOFTInterface extends Interface {
  getFunction(
    nameOrSignature: "oftVersion" | "quoteOFT" | "quoteSend" | "send" | "token"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OFTReceived" | "OFTSent"): EventFragment;

  encodeFunctionData(
    functionFragment: "oftVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteOFT",
    values: [SendParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSend",
    values: [SendParamStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [SendParamStruct, MessagingFeeStruct, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace OFTReceivedEvent {
  export type InputTuple = [
    guid: BytesLike,
    srcEid: BigNumberish,
    toAddress: AddressLike,
    amountReceived: BigNumberish
  ];
  export type OutputTuple = [
    guid: string,
    srcEid: bigint,
    toAddress: string,
    amountReceived: bigint
  ];
  export interface OutputObject {
    guid: string;
    srcEid: bigint;
    toAddress: string;
    amountReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OFTSentEvent {
  export type InputTuple = [
    guid: BytesLike,
    dstEid: BigNumberish,
    fromAddress: AddressLike,
    amountSent: BigNumberish,
    amountReceived: BigNumberish
  ];
  export type OutputTuple = [
    guid: string,
    dstEid: bigint,
    fromAddress: string,
    amountSent: bigint,
    amountReceived: bigint
  ];
  export interface OutputObject {
    guid: string;
    dstEid: bigint;
    fromAddress: string;
    amountSent: bigint;
    amountReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOFT extends BaseContract {
  connect(runner?: ContractRunner | null): IOFT;
  waitForDeployment(): Promise<this>;

  interface: IOFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  oftVersion: TypedContractMethod<
    [],
    [[string, bigint] & { interfaceId: string; version: bigint }],
    "view"
  >;

  quoteOFT: TypedContractMethod<
    [_sendParam: SendParamStruct],
    [
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & { oftFeeDetails: OFTFeeDetailStructOutput[] }
    ],
    "view"
  >;

  quoteSend: TypedContractMethod<
    [_sendParam: SendParamStruct, _payInLzToken: boolean],
    [MessagingFeeStructOutput],
    "view"
  >;

  send: TypedContractMethod<
    [
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: AddressLike
    ],
    [[MessagingReceiptStructOutput, OFTReceiptStructOutput]],
    "payable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "oftVersion"
  ): TypedContractMethod<
    [],
    [[string, bigint] & { interfaceId: string; version: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteOFT"
  ): TypedContractMethod<
    [_sendParam: SendParamStruct],
    [
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & { oftFeeDetails: OFTFeeDetailStructOutput[] }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteSend"
  ): TypedContractMethod<
    [_sendParam: SendParamStruct, _payInLzToken: boolean],
    [MessagingFeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: AddressLike
    ],
    [[MessagingReceiptStructOutput, OFTReceiptStructOutput]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OFTReceived"
  ): TypedContractEvent<
    OFTReceivedEvent.InputTuple,
    OFTReceivedEvent.OutputTuple,
    OFTReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OFTSent"
  ): TypedContractEvent<
    OFTSentEvent.InputTuple,
    OFTSentEvent.OutputTuple,
    OFTSentEvent.OutputObject
  >;

  filters: {
    "OFTReceived(bytes32,uint32,address,uint256)": TypedContractEvent<
      OFTReceivedEvent.InputTuple,
      OFTReceivedEvent.OutputTuple,
      OFTReceivedEvent.OutputObject
    >;
    OFTReceived: TypedContractEvent<
      OFTReceivedEvent.InputTuple,
      OFTReceivedEvent.OutputTuple,
      OFTReceivedEvent.OutputObject
    >;

    "OFTSent(bytes32,uint32,address,uint256,uint256)": TypedContractEvent<
      OFTSentEvent.InputTuple,
      OFTSentEvent.OutputTuple,
      OFTSentEvent.OutputObject
    >;
    OFTSent: TypedContractEvent<
      OFTSentEvent.InputTuple,
      OFTSentEvent.OutputTuple,
      OFTSentEvent.OutputObject
    >;
  };
}
