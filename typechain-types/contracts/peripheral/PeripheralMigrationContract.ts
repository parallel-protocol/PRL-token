/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type EnforcedOptionParamStruct = {
  eid: BigNumberish;
  msgType: BigNumberish;
  options: BytesLike;
};

export type EnforcedOptionParamStructOutput = [
  eid: bigint,
  msgType: bigint,
  options: string
] & { eid: bigint; msgType: bigint; options: string };

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [
  nativeFee: bigint,
  lzTokenFee: bigint
] & { nativeFee: bigint; lzTokenFee: bigint };

export type MessagingReceiptStruct = {
  guid: BytesLike;
  nonce: BigNumberish;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  guid: string,
  nonce: bigint,
  fee: MessagingFeeStructOutput
] & { guid: string; nonce: bigint; fee: MessagingFeeStructOutput };

export interface PeripheralMigrationContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIMO"
      | "SEND"
      | "SEND_AND_MIGRATE"
      | "combineOptions"
      | "emergencyRescue"
      | "endpoint"
      | "enforcedOptions"
      | "mainEid"
      | "migrateToPRL"
      | "oAppVersion"
      | "owner"
      | "pause"
      | "paused"
      | "peers"
      | "quote"
      | "renounceOwnership"
      | "setDelegate"
      | "setEnforcedOptions"
      | "setPeer"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyRescued"
      | "EnforcedOptionSet"
      | "MigrationMessageSent"
      | "OwnershipTransferred"
      | "Paused"
      | "PeerSet"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MIMO", values?: undefined): string;
  encodeFunctionData(functionFragment: "SEND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SEND_AND_MIGRATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "combineOptions",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRescue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enforcedOptions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mainEid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateToPRL",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnforcedOptions",
    values: [EnforcedOptionParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MIMO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SEND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SEND_AND_MIGRATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combineOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRescue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainEid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateToPRL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace EmergencyRescuedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, recipient: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnforcedOptionSetEvent {
  export type InputTuple = [_enforcedOptions: EnforcedOptionParamStruct[]];
  export type OutputTuple = [
    _enforcedOptions: EnforcedOptionParamStructOutput[]
  ];
  export interface OutputObject {
    _enforcedOptions: EnforcedOptionParamStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigrationMessageSentEvent {
  export type InputTuple = [
    guid: BytesLike,
    dstEid: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    nativeFeeAmount: BigNumberish,
    amountSent: BigNumberish
  ];
  export type OutputTuple = [
    guid: string,
    dstEid: bigint,
    from: string,
    to: string,
    nativeFeeAmount: bigint,
    amountSent: bigint
  ];
  export interface OutputObject {
    guid: string;
    dstEid: bigint;
    from: string;
    to: string;
    nativeFeeAmount: bigint;
    amountSent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PeerSetEvent {
  export type InputTuple = [eid: BigNumberish, peer: BytesLike];
  export type OutputTuple = [eid: bigint, peer: string];
  export interface OutputObject {
    eid: bigint;
    peer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PeripheralMigrationContract extends BaseContract {
  connect(runner?: ContractRunner | null): PeripheralMigrationContract;
  waitForDeployment(): Promise<this>;

  interface: PeripheralMigrationContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIMO: TypedContractMethod<[], [string], "view">;

  SEND: TypedContractMethod<[], [bigint], "view">;

  SEND_AND_MIGRATE: TypedContractMethod<[], [bigint], "view">;

  combineOptions: TypedContractMethod<
    [_eid: BigNumberish, _msgType: BigNumberish, _extraOptions: BytesLike],
    [string],
    "view"
  >;

  emergencyRescue: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  endpoint: TypedContractMethod<[], [string], "view">;

  enforcedOptions: TypedContractMethod<
    [eid: BigNumberish, msgType: BigNumberish],
    [string],
    "view"
  >;

  mainEid: TypedContractMethod<[], [bigint], "view">;

  migrateToPRL: TypedContractMethod<
    [
      _receiver: AddressLike,
      _amount: BigNumberish,
      _dstEid: BigNumberish,
      _extraSendOptions: BytesLike,
      _extraReturnOptions: BytesLike
    ],
    [MessagingReceiptStructOutput],
    "payable"
  >;

  oAppVersion: TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  peers: TypedContractMethod<[eid: BigNumberish], [string], "view">;

  quote: TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _receiver: AddressLike,
      _amount: BigNumberish,
      _extraSendOptions: BytesLike,
      _extraReturnOptions: BytesLike
    ],
    [MessagingFeeStructOutput],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDelegate: TypedContractMethod<
    [_delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  setEnforcedOptions: TypedContractMethod<
    [_enforcedOptions: EnforcedOptionParamStruct[]],
    [void],
    "nonpayable"
  >;

  setPeer: TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIMO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SEND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SEND_AND_MIGRATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "combineOptions"
  ): TypedContractMethod<
    [_eid: BigNumberish, _msgType: BigNumberish, _extraOptions: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyRescue"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "enforcedOptions"
  ): TypedContractMethod<
    [eid: BigNumberish, msgType: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "mainEid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrateToPRL"
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _amount: BigNumberish,
      _dstEid: BigNumberish,
      _extraSendOptions: BytesLike,
      _extraReturnOptions: BytesLike
    ],
    [MessagingReceiptStructOutput],
    "payable"
  >;
  getFunction(
    nameOrSignature: "oAppVersion"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { senderVersion: bigint; receiverVersion: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "peers"
  ): TypedContractMethod<[eid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "quote"
  ): TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _receiver: AddressLike,
      _amount: BigNumberish,
      _extraSendOptions: BytesLike,
      _extraReturnOptions: BytesLike
    ],
    [MessagingFeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelegate"
  ): TypedContractMethod<[_delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEnforcedOptions"
  ): TypedContractMethod<
    [_enforcedOptions: EnforcedOptionParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPeer"
  ): TypedContractMethod<
    [_eid: BigNumberish, _peer: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EmergencyRescued"
  ): TypedContractEvent<
    EmergencyRescuedEvent.InputTuple,
    EmergencyRescuedEvent.OutputTuple,
    EmergencyRescuedEvent.OutputObject
  >;
  getEvent(
    key: "EnforcedOptionSet"
  ): TypedContractEvent<
    EnforcedOptionSetEvent.InputTuple,
    EnforcedOptionSetEvent.OutputTuple,
    EnforcedOptionSetEvent.OutputObject
  >;
  getEvent(
    key: "MigrationMessageSent"
  ): TypedContractEvent<
    MigrationMessageSentEvent.InputTuple,
    MigrationMessageSentEvent.OutputTuple,
    MigrationMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PeerSet"
  ): TypedContractEvent<
    PeerSetEvent.InputTuple,
    PeerSetEvent.OutputTuple,
    PeerSetEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "EmergencyRescued(address,uint256,address)": TypedContractEvent<
      EmergencyRescuedEvent.InputTuple,
      EmergencyRescuedEvent.OutputTuple,
      EmergencyRescuedEvent.OutputObject
    >;
    EmergencyRescued: TypedContractEvent<
      EmergencyRescuedEvent.InputTuple,
      EmergencyRescuedEvent.OutputTuple,
      EmergencyRescuedEvent.OutputObject
    >;

    "EnforcedOptionSet(tuple[])": TypedContractEvent<
      EnforcedOptionSetEvent.InputTuple,
      EnforcedOptionSetEvent.OutputTuple,
      EnforcedOptionSetEvent.OutputObject
    >;
    EnforcedOptionSet: TypedContractEvent<
      EnforcedOptionSetEvent.InputTuple,
      EnforcedOptionSetEvent.OutputTuple,
      EnforcedOptionSetEvent.OutputObject
    >;

    "MigrationMessageSent(bytes32,uint32,address,address,uint256,uint256)": TypedContractEvent<
      MigrationMessageSentEvent.InputTuple,
      MigrationMessageSentEvent.OutputTuple,
      MigrationMessageSentEvent.OutputObject
    >;
    MigrationMessageSent: TypedContractEvent<
      MigrationMessageSentEvent.InputTuple,
      MigrationMessageSentEvent.OutputTuple,
      MigrationMessageSentEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PeerSet(uint32,bytes32)": TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;
    PeerSet: TypedContractEvent<
      PeerSetEvent.InputTuple,
      PeerSetEvent.OutputTuple,
      PeerSetEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
